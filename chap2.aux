\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\newpmemlabel{^_1}{1}
\@writefile{toc}{\contentsline {chapter}{\numberline {0}Where do internal wirings come from?}{5}{chapter.0}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {0.1}How do we communicate using language?}{5}{section.0.1}\protected@file@percent }
\newpmemlabel{^_2}{7}
\newpmemlabel{^_3}{7}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Preube and Fondo agree on the conceptual organisation entities and relations up to the words for those entities and relations. Just as a running example that does not affect the point, let's say we can gloss a thought in first order logic as $\exists a \exists b \exists c \exists f : A(a) \wedge B(b) \wedge C(c) \wedge F(f) \wedge L(a,f) \wedge G(b,c,f)$. In diagrammatic first order logic [], this is equivalently presented as the following diagrams (and any other diagram that agrees up to connectivity.) For example, Preube could ask Fondo comprehension questions such as \texttt  {WHO GAVE WHAT? TO WHO?}, and if Fondo can always correctly answer -- e.g. \texttt  {BOB GAVE FLOWERS. TO CLAIRE.} -- then both Preube and Fondo agree on the relational structure of the communicated thought to the extent permitted by language.}}{7}{section.0.1}\protected@file@percent }
\newlabel{fig:GFOLex}{{1}{7}{How do we communicate using language?}{section.0.1}{}}
\newpmemlabel{^_4}{7}
\newpmemlabel{^_6}{7}
\newpmemlabel{^_8}{7}
\newpmemlabel{^_10}{7}
\newpmemlabel{^_12}{7}
\newpmemlabel{^_5}{8}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces The rule of the game is that Preube and Fondo can agree on a string-diagrammatic encoding strategy before having to communicate with each other. Here is one such strategy. Preube might generate the example sentence as depicted.}}{8}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2a}{{2}{8}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\newpmemlabel{^_7}{8}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Mathematically, it makes no difference if we take the Poincar\'{e} dual of the tree, so that zero-dimensional nodes become one-dimensional wires, and branchings become zero-dimensional points linking wires -- but we can just as well depict those points as boxes to label them more clearly.}}{8}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2b}{{3}{8}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\newpmemlabel{^_9}{9}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Now that Preube can express their grammatical structure string-diagrammatically, they can try to deform their first-order-logic diagram -- representing what they mean to communicate -- subject to the constraint that every one of their branchings (the structure of the CFG) is something recoverable by Fondo using just pregroup reductions. To do so, Preube introduces a formal blue wire to mimic Fondo's sentence-type, and stuffs some complexity inside the labels in the form of internal wirings: a multiwire configuration for \texttt  {that}, and a twist for \texttt  {gives}. Those internal wirings are the content of Preube and Fondo's shared strategy.}}{9}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2c}{{4}{9}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\newpmemlabel{^_11}{9}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces So, when Fondo receives the sentence, Fondo's pregroup derivation yields a pregroup diagram that is connectively equivalent to what Preube stuffed inside the context-free grammar structure. So now the two have strong equivalence between their grammars in the sense that every one of Preube's branches is resolved by one of Fondo's reductions.}}{9}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2d}{{5}{9}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\newpmemlabel{^_13}{10}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Now to fully recover Preube's intended FOL-diagram, Fondo refers to the internal wirings that form their shared strategy, and fills those in.}}{10}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2}{{6}{10}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\newpmemlabel{^_14}{11}
\newpmemlabel{^_15}{11}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Preube's diagram morphed to fit a text circuit. The dotted blue line is a formal mark to indicate a sentential boundary. Observe how new discourse elements are introduced as states, and how open wires correspond to ongoing discourse and deletions mark completed discourse. This diagram also indicates that text circuits can be given semantics in FOL.}}{11}{theorem.0.1.2}\protected@file@percent }
\newlabel{fig:GFOLex3a}{{7}{11}{\texttt {Bob gives Claire flowers. Alice likes flowers.}}{theorem.0.1.2}{}}
\newpmemlabel{^_16}{11}
\newpmemlabel{^_17}{11}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces Fondo already knows how to parse individual sentences to extract the FOL using internal wirings. Observe there is a mathematical complication that arises in determining how many noun-wires should go into the sentence wire-bundle; we need to account for this later.}}{11}{theorem.0.1.2}\protected@file@percent }
\newlabel{fig:GFOLex3a}{{8}{11}{\texttt {Bob gives Claire flowers. Alice likes flowers.}}{theorem.0.1.2}{}}
\newpmemlabel{^_18}{11}
\newpmemlabel{^_19}{12}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces To deal with text, Fondo can pass a growing bundle of sentence wires along horizontally.}}{12}{theorem.0.1.2}\protected@file@percent }
\newlabel{fig:GFOLex3a}{{9}{12}{\texttt {Bob gives Claire flowers. Alice likes flowers.}}{theorem.0.1.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {0.1.1}Discrete Monoidal Fibrations}{12}{subsection.0.1.1}\protected@file@percent }
\newpmemlabel{^_20}{12}
\newpmemlabel{^_21}{12}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces There are two conventions for depicting the action of a monoidal functor on parts of a string diagram. The first follows source-to-target \emph  {outside-in}. This convention is used for work in internal wirings, since it is well-suited for describing functors that send atomic generators in their domain to more complex diagrams in their domain.}}{12}{subsection.0.1.1}\protected@file@percent }
\newlabel{fig:outsidein}{{10}{12}{Discrete Monoidal Fibrations}{subsection.0.1.1}{}}
\newpmemlabel{^_22}{12}
\newpmemlabel{^_24}{12}
\newpmemlabel{^_26}{12}
\newpmemlabel{^_28}{12}
\newpmemlabel{^_30}{12}
\newpmemlabel{^_32}{12}
\newpmemlabel{^_34}{12}
\newpmemlabel{^_36}{12}
\newpmemlabel{^_38}{12}
\newpmemlabel{^_40}{12}
\newpmemlabel{^_42}{12}
\newpmemlabel{^_44}{12}
\newpmemlabel{^_23}{13}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces The other convention, following \begin  {color}{red}CITE \end  {color}\xspace  , is \emph  {inside-out}. For the following section, we will define the coherence conditions of discrete monoidal fibrations using this convention.}}{13}{subsection.0.1.1}\protected@file@percent }
\newlabel{fig:insideout}{{11}{13}{Discrete Monoidal Fibrations}{subsection.0.1.1}{}}
\newpmemlabel{^_25}{13}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces Suppose we have a functor between monoidal categories $\mathbf  {F}: \mathcal  {C} \rightarrow \mathcal  {D}$. Then we have this diagrammatic representation of a morphism $\mathbf  {F}A \begingroup \setbox \z@ \hbox {\thinmuskip 0mu \medmuskip \m@ne mu\thickmuskip \@ne mu \setbox \tw@ \hbox {$\rightarrow \mathsurround \z@ $}\kern -\wd \tw@ ${}\rightarrow {}\mathsurround \z@ $}\edef false{\endgroup \let \binrel@@ \relax }false\binrel@@ {\mathop {\kern \z@ \rightarrow }\limits ^{\mathbf  {F}f}} \mathbf  {F}B$ in $\mathcal  {D}$.}}{13}{subsection.0.1.1}\protected@file@percent }
\newpmemlabel{^_27}{14}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces The use of a functor box is like a window from the target category $\mathcal  {D}$ into the source category $\mathcal  {C}$; when we know that a morphism in $\mathcal  {D}$ is the image under $\mathbf  {F}$ of some morphism in $\mathcal  {C}$, the functor box notation is just a way of presenting all of that data at once. Since $\mathbf  {F}$ is a functor, we must have that $\mathbf  {F}f ; \mathbf  {F}g = \mathbf  {F}(f;g)$. Diagrammatically this equation is represented by freely splitting and merging functor boxes vertically.}}{14}{subsection.0.1.1}\protected@file@percent }
\newpmemlabel{^_29}{14}
\@writefile{lof}{\contentsline {figure}{\numberline {14}{\ignorespaces Assume that $\mathbf  {F}$ is strict monoidal; without loss of generality by the strictification theorem \begin  {color}{red}CITE \end  {color}\xspace  , this lets us gloss over the associators and unitors. For $\mathbf  {F}$ to be strict monoidal, it has to preserve monoidal units and tensor products on the nose: i.e. $\mathbf  {F}I_\mathcal  {C} = I_\mathcal  {D}$ and $\mathbf  {F}A \otimes _\mathcal  {D} \mathbf  {F}B = \mathbf  {F}(A \otimes _\mathcal  {C} B)$. Diagrammatically these structural constraints amount to these equations.}}{14}{subsection.0.1.1}\protected@file@percent }
\newpmemlabel{^_31}{15}
\@writefile{lof}{\contentsline {figure}{\numberline {15}{\ignorespaces What remains is the monoidality of $\mathbf  {F}$, which is the requirement $\mathbf  {F}f \otimes \mathbf  {F}g = \mathbf  {F}(f \otimes g)$. Diagrammatically, this equation is represented by freely splitting and merging functor boxes horizontally; analogously to how splitting vertically is the functor-boxes' way of respecting sequential composition, splitting horizontally is how they respect parallel composition.}}{15}{subsection.0.1.1}\protected@file@percent }
\newpmemlabel{^_33}{15}
\@writefile{lof}{\contentsline {figure}{\numberline {16}{\ignorespaces And for when we want $\mathbf  {F}$ to be a (strict) symmetric monoidal functor, we are just asking that boxes and twists do not get stuck on one another.}}{15}{subsection.0.1.1}\protected@file@percent }
\newpmemlabel{^_35}{15}
\@writefile{lof}{\contentsline {figure}{\numberline {17}{\ignorespaces To motivate fibrations, first observe that by the diagrammatic equations of monoidal categories and functor boxes we have so far, we can always "slide out" the contents of a functor box out of the bottom. When can we do the reverse? That is, take a morphism in $\mathcal  {D}$ and \emph  {slide it into} a functor box? We know that in general this is not possible, because not all morphisms in $\mathcal  {D}$ may be in the image of $\mathbf  {F}$. So instead we ask "under what circumstances" can we do this for a functor $\mathbf  {F}$? The answer is when $\mathbf  {F}$ is a discrete fibration.}}{15}{subsection.0.1.1}\protected@file@percent }
\newpmemlabel{^_37}{16}
\@writefile{lof}{\contentsline {figure}{\numberline {18}{\ignorespaces  \begin  {defn}[Discrete opfibration] $\mathbf  {F}: \mathcal  {C} \rightarrow \mathcal  {D}$ is a \emph  {discrete fibration} when: for all morphisms $f: \mathbf  {F}A \rightarrow B$ in $\mathcal  {D}$ with domain in the image of $\mathbf  {F}$, there exists a unique object $\Phi ^A_f$ and a unique morphism $\phi _f: A \rightarrow \Phi ^A_f$ in $\mathcal  {C}$, such that $f = \mathbf  {F}\phi _f$. Diagrammatically, we can present all of the above as an equation reminiscent of sliding a morphism \emph  {into} a functor box from below. \end  {defn} }}{16}{subsection.0.1.1}\protected@file@percent }
\newpmemlabel{^_39}{16}
\@writefile{lof}{\contentsline {figure}{\numberline {19}{\ignorespaces \begin  {defn}[Monoidal discrete opfibration] We consider $\mathbf  {F}$ to be a \emph  {(strict, symmetric) monoidal discrete opfibration} when it is a (strict, symmetric) monoidal functor, a discrete opfibration, and the depicted equations relating lifts to interchange hold. The diagrammatic motivation for the additional coherence equations is that -- if we view the lifts of opfibrations as sliding morphisms into functor boxes -- we do not want the order in which sliding occurs to affect the final result. In this way, lifts behave as 'graphical primitives' in the same manner as interchange isotopies and symmetry twists. \end  {defn}}}{16}{theorem.0.1.3}\protected@file@percent }
\newpmemlabel{^_41}{17}
\@writefile{lof}{\contentsline {figure}{\numberline {20}{\ignorespaces We aim to be able to use discrete monoidal functor-boxes like so. In the leftmost diagram, we would like to graphically introduce pregroup states. In the first equation (isomorphism), we would like to use the monoidal condition of the functor to horizontally merge functor boxes. In the second equation, we would like to use the discrete fibration condition of the functor to expand the box downwards, converting a string diagram obtained from a context-free grammar into a pregroup diagram. Observe that the adverb \texttt  {quickly} has its label vertically flipped, alongside the adposition \texttt  {to} and the sentential-complement verb \texttt  {sees}. This is by design for all grammatical categories where pregroup typings are contextually dependent, as will be illustrated in Figure \ref  {fig:plan2}.}}{17}{theorem.0.1.4}\protected@file@percent }
\newlabel{fig:plan1}{{20}{17}{Discrete Monoidal Fibrations}{theorem.0.1.4}{}}
\newpmemlabel{^_43}{17}
\@writefile{lof}{\contentsline {figure}{\numberline {21}{\ignorespaces \texttt  {quickly} could find itself modifying an intransitive (single noun) or transitive (two noun) verb. Suppose that it is the job of some process $\leavevmode {\color  {orange}\texttt  {q'}}$ to handle intransitive verbs, and similarly $\leavevmode {\color  {orange}\texttt  {q''}}$ to handle transitive ones. We use the functor for bookkeeping, by asking it to send both $\leavevmode {\color  {orange}\texttt  {q'}}$ and $\leavevmode {\color  {orange}\texttt  {q''}}$ to the dependent label $\leavevmode {\color  {orange}\bar  {\texttt  {q}}}$. Treating the label as a test rather than a state allows the fibration-box to choose the right version based on the domain wires as it expands top-down. }}{17}{theorem.0.1.4}\protected@file@percent }
\newlabel{fig:plan2}{{21}{17}{Discrete Monoidal Fibrations}{theorem.0.1.4}{}}
\newpmemlabel{^_45}{17}
\@writefile{lof}{\contentsline {figure}{\numberline {22}{\ignorespaces However, this procedure as described is at risk of being ill-defined. Observe that in the third diagram of Figure \ref  {fig:plan1}, the assignment of wires in the domain of the functor to wires in the codomain of the functor is only declared by diagrammatic grouping; if we consider the algebraic data available in the third diagram, really all we have is the data in the figure. How do we know which wires in the domain of the functor correspond to which wires in the codomain? Resolving this issue is the purpose of the next section.}}{17}{theorem.0.1.4}\protected@file@percent }
\newlabel{fig:plan3}{{22}{17}{Discrete Monoidal Fibrations}{theorem.0.1.4}{}}
\newlabel{defn:strict}{{0.1.5}{18}{Strictified string diagrams}{theorem.0.1.5}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {0.1.2}Strictified diagrams for monoidal categories}{18}{subsection.0.1.2}\protected@file@percent }
\newlabel{cons:bracketing}{{0.1.7}{18}{Pregroups with bracketing}{theorem.0.1.7}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {0.1.3}Monoidal Cofunctors}{20}{subsection.0.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {0.2}Communicative constraints as a cofunctor from productive to parsing grammar}{21}{section.0.2}\protected@file@percent }
\newpmemlabel{^_46}{21}
\newpmemlabel{^_47}{21}
\newlabel{fig:plan1}{{0.2}{21}{Communicative constraints as a cofunctor from productive to parsing grammar}{section.0.2}{}}
\newpmemlabel{^_48}{21}
\newpmemlabel{^_49}{21}
\newlabel{fig:plan2}{{0.2}{21}{Communicative constraints as a cofunctor from productive to parsing grammar}{section.0.2}{}}
\newpmemlabel{^_50}{21}
\newpmemlabel{^_51}{21}
\newlabel{fig:plan3}{{0.2}{21}{Communicative constraints as a cofunctor from productive to parsing grammar}{section.0.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {0.3}Relating circuits and CFGs fibrationally}{31}{section.0.3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {0.4}Where internal wirings come from}{32}{section.0.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {0.4.1}Discrete monoidal fibrations for grammatical functions}{32}{subsection.0.4.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {0.5}Discussion and Limitations}{33}{section.0.5}\protected@file@percent }
\ttl@finishall
\gdef \@abspage@last{37}
