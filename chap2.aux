\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\newpmemlabel{^_1}{1}
\@writefile{toc}{\contentsline {chapter}{\numberline {0}Internal wirings: what, why, and where from?}{5}{chapter.0}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {0.1}How do we communicate using language?}{6}{section.0.1}\protected@file@percent }
\newlabel{sec:miracle}{{0.1}{6}{How do we communicate using language?}{section.0.1}{}}
\citation{haydon_compositional_2020}
\newpmemlabel{^_2}{7}
\citation{heim_semantics_1998}
\citation{yeung_ccg-based_2021}
\newpmemlabel{^_3}{8}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Charlie and Dennis agree on the conceptual organisation entities and relations up to the words for those entities and relations. Just as a running example that does not affect the point, let's say we can gloss a thought in first order logic as $\exists a \exists b \exists c \exists f : A(a) \wedge B(b) \wedge C(c) \wedge F(f) \wedge L(a,f) \wedge G(b,c,f)$. In diagrammatic first order logic \citep  {haydon_compositional_2020}, this is equivalently presented as the following diagrams (and any other diagram that agrees up to connectivity.) For example, Charlie could ask Dennis comprehension questions such as \texttt  {WHO GAVE WHAT? TO WHOM?}, and if Dennis can always correctly answer -- e.g. \texttt  {BOB GAVE FLOWERS. TO CLAIRE.} -- then both Charlie and Dennis agree on the relational structure of the communicated thought to the extent permitted by language.}}{8}{section.0.1}\protected@file@percent }
\newlabel{fig:GFOLex}{{1}{8}{How do we communicate using language?}{section.0.1}{}}
\newpmemlabel{^_4}{8}
\newpmemlabel{^_6}{8}
\newpmemlabel{^_8}{8}
\newpmemlabel{^_10}{8}
\newpmemlabel{^_12}{8}
\newpmemlabel{^_5}{9}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces The rule of the game is that Charlie and Dennis can agree on a string-diagrammatic encoding strategy before having to communicate with each other. Here is one such strategy. Charlie might generate the example sentence as depicted.}}{9}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2a}{{2}{9}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\newpmemlabel{^_7}{9}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Mathematically, it makes no difference if we take the Poincar\'{e} dual of the tree, so that zero-dimensional nodes become one-dimensional wires, and branchings become zero-dimensional points linking wires -- but we can just as well depict those points as boxes to label them more clearly.}}{9}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2b}{{3}{9}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\newpmemlabel{^_9}{10}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Now that Charlie can express their grammatical structure string-diagrammatically, they can try to deform their first-order-logic diagram -- representing what they mean to communicate -- subject to the constraint that every one of their branchings (the structure of the CFG) is something recoverable by Dennis using just pregroup reductions. To do so, Charlie introduces a formal blue wire to mimic Dennis's sentence-type, and stuffs some complexity inside the labels in the form of internal wirings: a multiwire configuration for \texttt  {that}, and a twist for \texttt  {gives}. Those internal wirings are the content of Charlie and Dennis's shared strategy. In passing, I'll remark that by the outside-in convention for functor boxes \ref  {fig:outsidein}, this diagram constitutes a monoidal functor from this particular CFG to pregroup diagrams, where nonlabel tree-nodes are partial monoidal closure evaluators. Replacing rigid autonomous closure with cartesian closure and $n,s$ with $e,t$ recovers montague semantics for CFGs (c.f. Curry-Howard-Lambek correspondence for the case of typed lambda-calculus and cartesian closed categories, and all of Heim and Kratzer \citep  {heim_semantics_1998}), and interpreting the closure in a compact closed setting recovers montague semantics for CCGs \citep  {yeung_ccg-based_2021}.}}{10}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2c}{{4}{10}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\newpmemlabel{^_11}{10}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces So, when Dennis receives the sentence, Dennis's pregroup derivation yields a pregroup diagram that is connectively equivalent to what Charlie stuffed inside the context-free grammar structure. So now the two have strong equivalence between their grammars in the sense that every one of Charlie's branches is resolved by one of Dennis's reductions. As is convention for pregroup diagrams, we only use types $n$ and $s$ -- the latter denoted by a blue wire here -- and we'll leave the directionality (rigid autonomous turning number) of wires implicit, so you can either trust me that everything typechecks or do it yourself.}}{10}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2d}{{5}{10}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\newpmemlabel{^_13}{11}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Now to fully recover Charlie's intended FOL-diagram, Dennis refers to the internal wirings from their shared strategy, and fills those in.}}{11}{theorem.0.1.1}\protected@file@percent }
\newlabel{fig:GFOLex2}{{6}{11}{\texttt {Alice likes flowers that Bob gives Claire.}}{theorem.0.1.1}{}}
\citation{wang-mascianica_internal_nodate}
\newpmemlabel{^_14}{12}
\newpmemlabel{^_15}{12}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Charlie's diagram morphed to fit a text circuit. The dotted blue line is a formal mark to indicate a sentential boundary. Observe how new discourse elements are introduced as states, and how open wires correspond to ongoing discourse and deletions mark completed discourse. This diagram also indicates that text circuits can be given semantics in FOL.}}{12}{theorem.0.1.2}\protected@file@percent }
\newlabel{fig:GFOLex3a}{{7}{12}{\texttt {Alice likes flowers. Bob gives Claire (those) flowers.}}{theorem.0.1.2}{}}
\newpmemlabel{^_16}{12}
\newpmemlabel{^_17}{12}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces Dennis already knows how to parse individual sentences to extract the FOL using internal wirings. Observe there is a mathematical complication that arises in determining how many noun-wires should go into the sentence wire-bundle; we need to account for this later.}}{12}{theorem.0.1.2}\protected@file@percent }
\newlabel{fig:GFOLex3a}{{8}{12}{\texttt {Alice likes flowers. Bob gives Claire (those) flowers.}}{theorem.0.1.2}{}}
\newpmemlabel{^_18}{12}
\newpmemlabel{^_19}{13}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces To deal with text, Dennis can pass a growing bundle of sentence wires along horizontally.}}{13}{theorem.0.1.2}\protected@file@percent }
\newlabel{fig:GFOLex3a}{{9}{13}{\texttt {Alice likes flowers. Bob gives Claire (those) flowers.}}{theorem.0.1.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {0.1.1}An issue with functorial semantics of internal wirings}{13}{subsection.0.1.1}\protected@file@percent }
\newpmemlabel{^_20}{13}
\newpmemlabel{^_21}{13}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces  \begin  {example}[Nonfunctoriality of internal wirings for productive grammars] \end  {example} Let's consider an easy context-free grammar, with just four types and three rules apart from labels. The types are: \texttt  {S} for sentences, \texttt  {N} for nouns, \texttt  {ADV} for adverbs, and \texttt  {V} for verbs. There is a single adverb introduction rule, and two verb introduction rules for intransitive and transitive verbs. }}{13}{subsection.0.1.1}\protected@file@percent }
\newlabel{ex:nonfunctprod}{{10}{13}{An issue with functorial semantics of internal wirings}{theorem.0.1.3}{}}
\newpmemlabel{^_22}{13}
\newpmemlabel{^_24}{13}
\citation{mellies_functorial_2006}
\newpmemlabel{^_23}{14}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces  Now suppose we want to describe a functor from this context free grammar to a pregroup grammar with just types $n$ and $s$. We know how verb states ought to look, and we know that adverbs ought to modify a verb. We can get pretty close with a first sketch, depicting the desired action of the functor using the outside-in convention for functor boxes, and we can slim them down to tubes. Now the simplicity of the CFG reveals a complication. Since there are two possible kinds of verbs, there are two possible kinds of adverbs, and accordingly two possible kinds of adverb introduction rules. A functor from the CFG to a pregroup diagram can't send the single adverb introduction rule to two different things at the same time. }}{14}{theorem.0.1.3}\protected@file@percent }
\newpmemlabel{^_25}{14}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces  \begin  {example}[Nonfunctoriality of internal wirings for parsing grammars] \end  {example} Compare \texttt  {Alice likes flowers that Bob hates} to the sentence in Figure \ref  {fig:GFOLex2}; here the object relative pronoun \texttt  {that} is connected to a transitive verb \texttt  {hates} rather than a ditransitive \texttt  {gives}. The internal wirings work fine in this example, but now \texttt  {that} deletes two wires instead of three; a functor can't map the same word-state to two possible instantiations. }}{14}{theorem.0.1.3}\protected@file@percent }
\newlabel{ex:nonfunctparse}{{12}{14}{An issue with functorial semantics of internal wirings}{theorem.0.1.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {0.2}Discrete Monoidal Opfibrations}{14}{section.0.2}\protected@file@percent }
\newpmemlabel{^_26}{15}
\newpmemlabel{^_27}{15}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces There are two conventions for depicting the action of a monoidal functor on parts of a string diagram. The first follows source-to-target \emph  {outside-in}. This convention is used for other work in internal wirings, since it is well-suited for describing functors that send atomic generators in their domain to more complex diagrams in their codomain.}}{15}{theorem.0.2.1}\protected@file@percent }
\newlabel{fig:outsidein}{{13}{15}{Discrete Monoidal Opfibrations}{theorem.0.2.1}{}}
\newpmemlabel{^_28}{15}
\newpmemlabel{^_29}{15}
\@writefile{lof}{\contentsline {figure}{\numberline {14}{\ignorespaces The other convention is \emph  {inside-out}. For the following section, we will define the coherence conditions of discrete monoidal opfibrations using this convention.}}{15}{theorem.0.2.1}\protected@file@percent }
\newlabel{fig:insideout}{{14}{15}{Discrete Monoidal Opfibrations}{theorem.0.2.1}{}}
\newpmemlabel{^_30}{15}
\newpmemlabel{^_32}{15}
\newpmemlabel{^_34}{15}
\newpmemlabel{^_36}{15}
\newpmemlabel{^_38}{15}
\newpmemlabel{^_40}{15}
\newpmemlabel{^_42}{15}
\newpmemlabel{^_44}{15}
\newpmemlabel{^_31}{16}
\@writefile{lof}{\contentsline {figure}{\numberline {15}{\ignorespaces Suppose we have a functor between monoidal categories $\mathbf  {F}: \mathcal  {C} \rightarrow \mathcal  {D}$. Then we have this diagrammatic representation of a morphism $\mathbf  {F}A \begingroup \setbox \z@ \hbox {\thinmuskip 0mu \medmuskip \m@ne mu\thickmuskip \@ne mu \setbox \tw@ \hbox {$\rightarrow \mathsurround \z@ $}\kern -\wd \tw@ ${}\rightarrow {}\mathsurround \z@ $}\edef true{\endgroup \let \binrel@@ \mathrel }true\binrel@@ {\mathop {\kern \z@ \rightarrow }\limits ^{\mathbf  {F}f}} \mathbf  {F}B$ in $\mathcal  {D}$.}}{16}{theorem.0.2.1}\protected@file@percent }
\newpmemlabel{^_33}{16}
\@writefile{lof}{\contentsline {figure}{\numberline {16}{\ignorespaces The use of a functor box is like a window from the target category $\mathcal  {D}$ into the source category $\mathcal  {C}$; when we know that a morphism in $\mathcal  {D}$ is the image under $\mathbf  {F}$ of some morphism in $\mathcal  {C}$, the functor box notation is just a way of presenting all of that data at once. Since $\mathbf  {F}$ is a functor, we must have that $\mathbf  {F}f ; \mathbf  {F}g = \mathbf  {F}(f;g)$. Diagrammatically this equation is represented by freely splitting and merging functor boxes vertically. \textbf  {N.B.} sequential merging of two boxes requires that the two wires to-be-connected within the boxes -- in this case labelled $B$ -- need to be the same; a case where merging is disallowed is when $Ff;Fg$ typechecks in the outside/target category, but $f;g$ does not in the inside/source category because the functor identifies nonequal wires.}}{16}{theorem.0.2.1}\protected@file@percent }
\newpmemlabel{^_35}{17}
\@writefile{lof}{\contentsline {figure}{\numberline {17}{\ignorespaces Assume that $\mathbf  {F}$ is strict monoidal; without loss of generality by the strictification theorem, this lets us gloss over the associators and unitors and treat them as equalities. For $\mathbf  {F}$ to be strict monoidal, it has to preserve monoidal units and tensor products on the nose: i.e. $\mathbf  {F}I_\mathcal  {C} = I_\mathcal  {D}$ and $\mathbf  {F}A \otimes _\mathcal  {D} \mathbf  {F}B = \mathbf  {F}(A \otimes _\mathcal  {C} B)$. Diagrammatically these structural constraints amount to these equations.}}{17}{theorem.0.2.1}\protected@file@percent }
\newpmemlabel{^_37}{17}
\@writefile{lof}{\contentsline {figure}{\numberline {18}{\ignorespaces What remains is the monoidality of $\mathbf  {F}$, which is the requirement $\mathbf  {F}f \otimes \mathbf  {F}g = \mathbf  {F}(f \otimes g)$. Diagrammatically, this equation is represented by freely splitting and merging functor boxes horizontally; analogously to how splitting vertically is the functor-boxes' way of respecting sequential composition, splitting horizontally is how they respect parallel composition.}}{17}{theorem.0.2.1}\protected@file@percent }
\newpmemlabel{^_39}{17}
\@writefile{lof}{\contentsline {figure}{\numberline {19}{\ignorespaces And for when we want $\mathbf  {F}$ to be a (strict) symmetric monoidal functor, we are just asking that boxes and twists do not get stuck on one another.}}{17}{theorem.0.2.1}\protected@file@percent }
\newpmemlabel{^_41}{18}
\@writefile{lof}{\contentsline {figure}{\numberline {20}{\ignorespaces To motivate opfibrations, first observe that by the diagrammatic equations of monoidal categories and functor boxes we have so far, we can always "slide out" the contents of a functor box out of the bottom. When can we do the reverse? That is, take a morphism in $\mathcal  {D}$ and \emph  {slide it into} a functor box? We know that in general this is not possible, because not all morphisms in $\mathcal  {D}$ may be in the image of $\mathbf  {F}$. So instead we ask "under what circumstances" can we do this for a functor $\mathbf  {F}$? The answer is when $\mathbf  {F}$ is a discrete opfibration.}}{18}{theorem.0.2.1}\protected@file@percent }
\newpmemlabel{^_43}{18}
\@writefile{lof}{\contentsline {figure}{\numberline {21}{\ignorespaces  \begin  {defn}[Discrete opfibration] $\mathbf  {F}: \mathcal  {C} \rightarrow \mathcal  {D}$ is a \emph  {discrete opfibration} when: for all morphisms $f: \mathbf  {F}A \rightarrow B$ in $\mathcal  {D}$ with domain in the image of $\mathbf  {F}$, there exists a unique object $\Phi ^A_f$ such that $\mathbf  {F}\Phi ^A_f = B$ and a unique morphism $\phi _f: A \rightarrow \Phi ^A_f$ in $\mathcal  {C}$, such that $f = \mathbf  {F}\phi _f$. Diagrammatically, we can present all of the above as an equation reminiscent of sliding a morphism \emph  {into} a functor box from below. The process inside the box is called \emph  {the lift} of the process that was slid in. The collection of all lifts over a wire or box is called \emph  {the fibre over} that wire or box. \end  {defn} }}{18}{theorem.0.2.1}\protected@file@percent }
\newlabel{defn:discopf}{{21}{18}{Discrete Monoidal Opfibrations}{theorem.0.2.2}{}}
\newpmemlabel{^_45}{19}
\@writefile{lof}{\contentsline {figure}{\numberline {22}{\ignorespaces \begin  {defn}[Monoidal discrete opfibration] We consider $\mathbf  {F}$ to be a \emph  {(strict, symmetric) monoidal discrete opfibration} when it is a (strict, symmetric) monoidal functor, a discrete opfibration, and the depicted equations relating lifts to interchange hold. The diagrammatic motivation for the additional coherence equations is that -- if we view the lifts of opfibrations as sliding morphisms into functor boxes -- we do not want the order in which sliding occurs to affect the final result. In this way, lifts behave as graphical primitives in the same manner as interchange isotopies and symmetry twists. \leavevmode {\color  {blue}Postscript: Stefano Gogioso observes that this property may be simplified to asking that for all $f: \mathbf  {F}A \rightarrow B$, there exists a unique $\varphi _f: A \rightarrow \Phi _f$ such that for all objects $C$, $\mathbf  {F}(\varphi _f \otimes 1_C) = f \otimes 1_{\mathbf  {F}C}$, which is potentially easier to verify, and moreover related to "complete" variants of properties (c.f. complete positivity in categorical quantum mechanics) where a property is stable under tensors with the identity. After helpful discussions with Joe Moeller, in joint and ongoing work with Caterina Puca analysing functor boxes we show that these equations are equivalent to asking that the cartesian lift of tensors is equal to the tensor of cartesian lifts. This condition in conjunction with asking for the underlying functor to be strict monoidal and a opfibration then agrees with the "canon" definition of monoidal opfibrations given by Mike Shulman, for the discrete case.} \end  {defn}}}{19}{theorem.0.2.2}\protected@file@percent }
\newlabel{defn:mondiscopf}{{22}{19}{Discrete Monoidal Opfibrations}{theorem.0.2.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {0.2.1}What are they good for?}{20}{subsection.0.2.1}\protected@file@percent }
\newpmemlabel{^_46}{20}
\newpmemlabel{^_47}{20}
\@writefile{lof}{\contentsline {figure}{\numberline {23}{\ignorespaces  Now we try to use monoidal discrete opfibrations to help us solve the speaker's nonfunctoriality problem (Example \ref  {ex:nonfunctprod}). First we flip over the labels and introduction rules for adverbs. Call this a \emph  {dependent CFG}, or \emph  {dCFG}. There are several ways to do this formally, by e.g. specifying a new string-diagram signature from the old one or assuming rigid autonomous completion, and it doesn't matter which we use. }}{20}{subsection.0.2.1}\protected@file@percent }
\newpmemlabel{^_48}{20}
\newpmemlabel{^_49}{20}
\@writefile{lof}{\contentsline {figure}{\numberline {24}{\ignorespaces  Treating the label as a test rather than a state will allow the opfibration-box to choose the right version based on the domain wires as it expands top-down. In this case, since CFGs are planar, flipping causes no confusion, since we can always flip the labels back over. Recall that opfibrations can decide which lift to depict given a choice of codomain wires. We would like to encode the dependency of the upside-down adverb labels and introduction rules as lifts that depend on the lift of the verb wire, which may be either an intransitive or transitive verb. }}{20}{subsection.0.2.1}\protected@file@percent }
\newpmemlabel{^_50}{20}
\newpmemlabel{^_52}{20}
\newpmemlabel{^_51}{21}
\@writefile{lof}{\contentsline {figure}{\numberline {25}{\ignorespaces  Instead of \emph  {us} making the choice, we can force the choice using the information of the CFG structure. Starting from a dCFG diagram, the state-labels have unique lifts: noun labels in CFGs correspond uniquely to noun-states in pregroup diagrams, and verb labels to verb-states which may be either intransitive or transitive. This obtains the first equation. The second equation is obtained by monoidality. The third "eating downwards" equation is obtained by the opfibration property; note that because the codomain wires before the lift are already decided to be those of an intransitive verb's pregroup type, the correct adverb introduction rule can be selected for the lift. }}{21}{subsection.0.2.1}\protected@file@percent }
\newpmemlabel{^_53}{21}
\@writefile{lof}{\contentsline {figure}{\numberline {26}{\ignorespaces  But there's a technical problem. We have been assigning wires from the codomain of the lift to the dCFG implicitly, by grouping wires together visually to indicate which wires inside the functor box correspond to wires outside. However, when we consider the algebraic data available, all we know is depicted in the figure: we need some way to assign the wires. Solving the wire assignment probem will be the focus of the next section. }}{21}{subsection.0.2.1}\protected@file@percent }
\newlabel{fig:wireproblem}{{26}{21}{What are they good for?}{subsection.0.2.1}{}}
\citation{wilson_string_2022}
\citation{wilson_string_2022}
\newlabel{defn:strict}{{0.3.1}{22}{Strictified string diagrams}{theorem.0.3.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {0.3}Strictified diagrams for monoidal categories}{22}{section.0.3}\protected@file@percent }
\newlabel{cons:bracketing}{{0.3.3}{22}{Pregroups with bracketing}{theorem.0.3.3}{}}
\newlabel{prop:strictequiv}{{0.3.2}{23}{$\bar {\mathcal {M}}$ and $\mathcal {M}$ are monoidally equivalent}{theorem.0.3.2}{}}
\newlabel{ex:prooftree}{{0.3.4}{23}{Pregroups with bracketing recover proof trees}{theorem.0.3.4}{}}
\tcolorbox@label{1}{24}
\newlabel{cons:pg2cfg}{{0.3.5}{24}{Discrete monoidal opfibration from pregroups with bracketing into dependent CFGs}{theorem.0.3.5}{}}
\tcolorbox@label{2}{25}
\tcolorbox@label{3}{26}
\citation{clarke_double_2023}
\@writefile{toc}{\contentsline {section}{\numberline {0.4}Monoidal cofunctor boxes}{27}{section.0.4}\protected@file@percent }
\newlabel{defn:bijonobj}{{0.4.3}{27}{Bijective-on-objects functor}{theorem.0.4.3}{}}
\newlabel{prop:cofunctorspan}{{0.4.4}{27}{Cofunctors as spans of functors}{theorem.0.4.4}{}}
\tcolorbox@label{4}{28}
\tcolorbox@label{5}{29}
\@writefile{toc}{\contentsline {section}{\numberline {0.5}Monoidal kinda-confunctor boxes}{30}{section.0.5}\protected@file@percent }
\newpmemlabel{^_54}{30}
\newpmemlabel{^_55}{30}
\@writefile{lof}{\contentsline {figure}{\numberline {27}{\ignorespaces  \begin  {example}[Lifts for cups are not always defined] \end  {example} Starting from the leftmost diagram, in order to let the functor box eat the whole diagram, we need to first choose a lift for the left-sentence wire for the cup. Recalling Figures \ref  {fig:GFOLex2} and \ref  {ex:nonfunctparse}, there are at least two lifts for the sentence-wire in pregroup diagrams, for the case of two or three noun-wires. Everything works smoothly when the lifts on the two sentence wires of a cup match. When if we make the wrong choice and they don't, there is no lift, because there is no such thing as a cup that has two wires on one end and three on the other. Recall from Definition \ref  {defn:discopf} that a unique lift is required for \emph  {every possible} codomain inside the functor box; so we do not have a discrete opfibration, and so we cannot have a cofunctor. }}{30}{section.0.5}\protected@file@percent }
\newlabel{defn:discopf}{{0.5.2}{30}{Kinda-opfibration}{theorem.0.5.2}{}}
\citation{wang-mascianica_internal_nodate}
\citation{hu_external_nodate,roman_open_2021}
\tcolorbox@label{6}{31}
\newlabel{ex:bigexlift}{{0.5.4}{31}{A monoidal kinda-opfibration into pregroup diagrams from a subcategory of bracketed pregroups with spiders}{theorem.0.5.4}{}}
\tcolorbox@label{7}{32}
\tcolorbox@label{8}{33}
\tcolorbox@label{9}{34}
\tcolorbox@label{10}{35}
\tcolorbox@label{11}{36}
\@writefile{toc}{\contentsline {section}{\numberline {0.6}Discussion and Limitations}{37}{section.0.6}\protected@file@percent }
\citation{linus_pauling_memorial_lecture_series_neuroscience_2018}
\citation{buszkowski_pregroup_nodate}
\ttl@finishall
\gdef \@abspage@last{42}
